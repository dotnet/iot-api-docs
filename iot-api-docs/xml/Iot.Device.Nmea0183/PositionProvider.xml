<Type Name="PositionProvider" FullName="Iot.Device.Nmea0183.PositionProvider">
  <TypeSignature Language="C#" Value="public class PositionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PositionProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Iot.Device.Nmea0183.PositionProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class PositionProvider" />
  <TypeSignature Language="F#" Value="type PositionProvider = class" />
  <AssemblyInfo>
    <AssemblyName>Iot.Device.Bindings</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides high-level methods to obtain position and other aggregated data from NMEA sources.
            The class takes the best available data sets to generate the required output.
            A position can for instance be obtained from <see cref="T:Iot.Device.Nmea0183.Sentences.PositionFastUpdate" />, <see cref="T:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData" /> or
            <see cref="T:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation" />, depending on whatever the GNSS receiver delivers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PositionProvider (Iot.Device.Nmea0183.NmeaSinkAndSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Iot.Device.Nmea0183.NmeaSinkAndSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.#ctor(Iot.Device.Nmea0183.NmeaSinkAndSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSource As NmeaSinkAndSource)" />
      <MemberSignature Language="F#" Value="new Iot.Device.Nmea0183.PositionProvider : Iot.Device.Nmea0183.NmeaSinkAndSource -&gt; Iot.Device.Nmea0183.PositionProvider" Usage="new Iot.Device.Nmea0183.PositionProvider dataSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSource" Type="Iot.Device.Nmea0183.NmeaSinkAndSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">The data source to monitor</param>
        <summary>
            Create a position provider from a given data source.
            The data source is monitored for changes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PositionProvider (Iot.Device.Nmea0183.SentenceCache cache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Iot.Device.Nmea0183.SentenceCache cache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.#ctor(Iot.Device.Nmea0183.SentenceCache)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cache As SentenceCache)" />
      <MemberSignature Language="F#" Value="new Iot.Device.Nmea0183.PositionProvider : Iot.Device.Nmea0183.SentenceCache -&gt; Iot.Device.Nmea0183.PositionProvider" Usage="new Iot.Device.Nmea0183.PositionProvider cache" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cache" Type="Iot.Device.Nmea0183.SentenceCache" />
      </Parameters>
      <Docs>
        <param name="cache">The cache to use</param>
        <summary>
            Create a position provider using an existing cache.
            The cache must be updated externally.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSatellitesInView">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;Iot.Device.Nmea0183.Sentences.SatelliteInfo&gt; GetSatellitesInView (out int totalNumberOfSatellites);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class Iot.Device.Nmea0183.Sentences.SatelliteInfo&gt; GetSatellitesInView([out] int32&amp; totalNumberOfSatellites) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.GetSatellitesInView(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSatellitesInView (ByRef totalNumberOfSatellites As Integer) As List(Of SatelliteInfo)" />
      <MemberSignature Language="F#" Value="member this.GetSatellitesInView : int -&gt; System.Collections.Generic.List&lt;Iot.Device.Nmea0183.Sentences.SatelliteInfo&gt;" Usage="positionProvider.GetSatellitesInView totalNumberOfSatellites" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Iot.Device.Nmea0183.Sentences.SatelliteInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalNumberOfSatellites" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="totalNumberOfSatellites">Total number of satellites reported.
            This number might be larger than the number of elements in the list, as there might not be enough
            slots to transfer the whole status for all satellites</param>
        <summary>
            Returns the list of satellites in view
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCurrentPosition">
      <MemberSignature Language="C#" Value="public bool TryGetCurrentPosition (out Iot.Device.Common.GeographicPosition? position, out UnitsNet.Angle track, out UnitsNet.Speed sog, out UnitsNet.Angle? heading);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetCurrentPosition([out] class Iot.Device.Common.GeographicPosition&amp; position, [out] valuetype UnitsNet.Angle&amp; track, [out] valuetype UnitsNet.Speed&amp; sog, [out] valuetype System.Nullable`1&lt;valuetype UnitsNet.Angle&gt;&amp; heading) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCurrentPosition (ByRef position As GeographicPosition, ByRef track As Angle, ByRef sog As Speed, ByRef heading As Nullable(Of Angle)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetCurrentPosition : GeographicPosition * Angle * Speed * Nullable -&gt; bool" Usage="positionProvider.TryGetCurrentPosition (position, track, sog, heading)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Iot.Device.Common.GeographicPosition" RefType="out" />
        <Parameter Name="track" Type="UnitsNet.Angle" RefType="out" />
        <Parameter Name="sog" Type="UnitsNet.Speed" RefType="out" />
        <Parameter Name="heading" Type="System.Nullable&lt;UnitsNet.Angle&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="position">Current position</param>
        <param name="track">Track (course over ground)</param>
        <param name="sog">Speed over ground</param>
        <param name="heading">Vessel Heading</param>
        <summary>
            Get the current position from the latest message containing any of the relevant data parts. This does not extrapolate the position
            if the last received message is old
            </summary>
        <returns>True if a valid position is returned</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCurrentPosition">
      <MemberSignature Language="C#" Value="public bool TryGetCurrentPosition (out Iot.Device.Common.GeographicPosition? position, bool extrapolate, out UnitsNet.Angle track, out UnitsNet.Speed sog, out UnitsNet.Angle? heading);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetCurrentPosition([out] class Iot.Device.Common.GeographicPosition&amp; position, bool extrapolate, [out] valuetype UnitsNet.Angle&amp; track, [out] valuetype UnitsNet.Speed&amp; sog, [out] valuetype System.Nullable`1&lt;valuetype UnitsNet.Angle&gt;&amp; heading) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCurrentPosition (ByRef position As GeographicPosition, extrapolate As Boolean, ByRef track As Angle, ByRef sog As Speed, ByRef heading As Nullable(Of Angle)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetCurrentPosition : GeographicPosition * bool * Angle * Speed * Nullable -&gt; bool" Usage="positionProvider.TryGetCurrentPosition (position, extrapolate, track, sog, heading)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Iot.Device.Common.GeographicPosition" RefType="out" />
        <Parameter Name="extrapolate" Type="System.Boolean" />
        <Parameter Name="track" Type="UnitsNet.Angle" RefType="out" />
        <Parameter Name="sog" Type="UnitsNet.Speed" RefType="out" />
        <Parameter Name="heading" Type="System.Nullable&lt;UnitsNet.Angle&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="position">Current position</param>
        <param name="extrapolate">True to extrapolate the current position using speed and track</param>
        <param name="track">Track (course over ground)</param>
        <param name="sog">Speed over ground</param>
        <param name="heading">Vessel Heading</param>
        <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate" /> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
        <returns>True if a valid position is returned</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCurrentPosition">
      <MemberSignature Language="C#" Value="public bool TryGetCurrentPosition (out Iot.Device.Common.GeographicPosition? position, string? source, bool extrapolate, out UnitsNet.Angle track, out UnitsNet.Speed sog, out UnitsNet.Angle? heading, out DateTimeOffset messageTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetCurrentPosition([out] class Iot.Device.Common.GeographicPosition&amp; position, string source, bool extrapolate, [out] valuetype UnitsNet.Angle&amp; track, [out] valuetype UnitsNet.Speed&amp; sog, [out] valuetype System.Nullable`1&lt;valuetype UnitsNet.Angle&gt;&amp; heading, [out] valuetype System.DateTimeOffset&amp; messageTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.String,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCurrentPosition (ByRef position As GeographicPosition, source As String, extrapolate As Boolean, ByRef track As Angle, ByRef sog As Speed, ByRef heading As Nullable(Of Angle), ByRef messageTime As DateTimeOffset) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetCurrentPosition : GeographicPosition * string * bool * Angle * Speed * Nullable * DateTimeOffset -&gt; bool" Usage="positionProvider.TryGetCurrentPosition (position, source, extrapolate, track, sog, heading, messageTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Iot.Device.Common.GeographicPosition" RefType="out" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="extrapolate" Type="System.Boolean" />
        <Parameter Name="track" Type="UnitsNet.Angle" RefType="out" />
        <Parameter Name="sog" Type="UnitsNet.Speed" RefType="out" />
        <Parameter Name="heading" Type="System.Nullable&lt;UnitsNet.Angle&gt;" RefType="out" />
        <Parameter Name="messageTime" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="position">Current position</param>
        <param name="source">Only look at this source (otherwise, if multiple sources provide a position, any is used)</param>
        <param name="extrapolate">True to extrapolate the current position using speed and track</param>
        <param name="track">Track (course over ground)</param>
        <param name="sog">Speed over ground</param>
        <param name="heading">Vessel Heading</param>
        <param name="messageTime">Time of the position report that was used</param>
        <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate" /> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
        <returns>True if a valid position is returned</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCurrentPosition">
      <MemberSignature Language="C#" Value="public bool TryGetCurrentPosition (out Iot.Device.Common.GeographicPosition? position, string? source, bool extrapolate, out UnitsNet.Angle track, out UnitsNet.Speed sog, out UnitsNet.Angle? heading, out DateTimeOffset messageTime, DateTimeOffset now);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetCurrentPosition([out] class Iot.Device.Common.GeographicPosition&amp; position, string source, bool extrapolate, [out] valuetype UnitsNet.Angle&amp; track, [out] valuetype UnitsNet.Speed&amp; sog, [out] valuetype System.Nullable`1&lt;valuetype UnitsNet.Angle&gt;&amp; heading, [out] valuetype System.DateTimeOffset&amp; messageTime, valuetype System.DateTimeOffset now) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.String,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@,System.DateTimeOffset@,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCurrentPosition (ByRef position As GeographicPosition, source As String, extrapolate As Boolean, ByRef track As Angle, ByRef sog As Speed, ByRef heading As Nullable(Of Angle), ByRef messageTime As DateTimeOffset, now As DateTimeOffset) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetCurrentPosition : GeographicPosition * string * bool * Angle * Speed * Nullable * DateTimeOffset * DateTimeOffset -&gt; bool" Usage="positionProvider.TryGetCurrentPosition (position, source, extrapolate, track, sog, heading, messageTime, now)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="Iot.Device.Common.GeographicPosition" RefType="out" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="extrapolate" Type="System.Boolean" />
        <Parameter Name="track" Type="UnitsNet.Angle" RefType="out" />
        <Parameter Name="sog" Type="UnitsNet.Speed" RefType="out" />
        <Parameter Name="heading" Type="System.Nullable&lt;UnitsNet.Angle&gt;" RefType="out" />
        <Parameter Name="messageTime" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="now" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="position">Current position</param>
        <param name="source">Only look at this source (otherwise, if multiple sources provide a position, any is used)</param>
        <param name="extrapolate">True to extrapolate the current position using speed and track</param>
        <param name="track">Track (course over ground)</param>
        <param name="sog">Speed over ground</param>
        <param name="heading">Vessel Heading</param>
        <param name="messageTime">Time of the position report that was used</param>
        <param name="now">The current time (when working with data in the past, this may be the a time within that data set)</param>
        <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate" /> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
        <returns>True if a valid position is returned</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCurrentRoute">
      <MemberSignature Language="C#" Value="public Iot.Device.Nmea0183.AutopilotErrorState TryGetCurrentRoute (out System.Collections.Generic.List&lt;Iot.Device.Nmea0183.RoutePoint&gt; routeList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Iot.Device.Nmea0183.AutopilotErrorState TryGetCurrentRoute([out] class System.Collections.Generic.List`1&lt;class Iot.Device.Nmea0183.RoutePoint&gt;&amp; routeList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentRoute(System.Collections.Generic.List{Iot.Device.Nmea0183.RoutePoint}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCurrentRoute (ByRef routeList As List(Of RoutePoint)) As AutopilotErrorState" />
      <MemberSignature Language="F#" Value="member this.TryGetCurrentRoute : List -&gt; Iot.Device.Nmea0183.AutopilotErrorState" Usage="positionProvider.TryGetCurrentRoute routeList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Iot.Device.Nmea0183.AutopilotErrorState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeList" Type="System.Collections.Generic.List&lt;Iot.Device.Nmea0183.RoutePoint&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="routeList">The list of points along the route</param>
        <summary>
            Returns the current route
            </summary>
        <returns>The state of the route received</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
