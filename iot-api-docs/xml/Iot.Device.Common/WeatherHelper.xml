<Type Name="WeatherHelper" FullName="Iot.Device.Common.WeatherHelper">
  <TypeSignature Language="C#" Value="public static class WeatherHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WeatherHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Iot.Device.Common.WeatherHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class WeatherHelper" />
  <TypeSignature Language="F#" Value="type WeatherHelper = class" />
  <AssemblyInfo>
    <AssemblyName>Iot.Device.Bindings</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class contains methods to calculate meteorological values from different
            sensor measurements. Multiple sensor inputs are used to generate additional information.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CalculateAbsoluteHumidity">
      <MemberSignature Language="C#" Value="public static UnitsNet.Density CalculateAbsoluteHumidity (UnitsNet.Temperature airTemperature, UnitsNet.Ratio relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Density CalculateAbsoluteHumidity(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.Ratio relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAbsoluteHumidity(UnitsNet.Temperature,UnitsNet.Ratio)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAbsoluteHumidity (airTemperature As Temperature, relativeHumidity As Ratio) As Density" />
      <MemberSignature Language="F#" Value="static member CalculateAbsoluteHumidity : UnitsNet.Temperature * UnitsNet.Ratio -&gt; UnitsNet.Density" Usage="Iot.Device.Common.WeatherHelper.CalculateAbsoluteHumidity (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Density</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.Ratio" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the absolute humidity in g/m続
            </summary>
        <returns>The absolute humidity in g/m続</returns>
        <remarks>
            Source https://de.wikipedia.org/wiki/Luftfeuchtigkeit#Absolute_Luftfeuchtigkeit
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAbsoluteHumidity">
      <MemberSignature Language="C#" Value="public static UnitsNet.Density CalculateAbsoluteHumidity (UnitsNet.Temperature airTemperature, UnitsNet.RelativeHumidity relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Density CalculateAbsoluteHumidity(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.RelativeHumidity relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAbsoluteHumidity(UnitsNet.Temperature,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAbsoluteHumidity (airTemperature As Temperature, relativeHumidity As RelativeHumidity) As Density" />
      <MemberSignature Language="F#" Value="static member CalculateAbsoluteHumidity : UnitsNet.Temperature * UnitsNet.RelativeHumidity -&gt; UnitsNet.Density" Usage="Iot.Device.Common.WeatherHelper.CalculateAbsoluteHumidity (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Density</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.RelativeHumidity" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the absolute humidity in g/m続.
            </summary>
        <returns>The absolute humidity in g/m続</returns>
        <remarks>
            Source https://de.wikipedia.org/wiki/Luftfeuchtigkeit#Absolute_Luftfeuchtigkeit
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateActualVaporPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateActualVaporPressure (UnitsNet.Temperature airTemperature, UnitsNet.Ratio relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateActualVaporPressure(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.Ratio relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateActualVaporPressure(UnitsNet.Temperature,UnitsNet.Ratio)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateActualVaporPressure (airTemperature As Temperature, relativeHumidity As Ratio) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateActualVaporPressure : UnitsNet.Temperature * UnitsNet.Ratio -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateActualVaporPressure (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.Ratio" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the actual vapor pressure.
            </summary>
        <returns>The actual vapor pressure</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateActualVaporPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateActualVaporPressure (UnitsNet.Temperature airTemperature, UnitsNet.RelativeHumidity relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateActualVaporPressure(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.RelativeHumidity relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateActualVaporPressure(UnitsNet.Temperature,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateActualVaporPressure (airTemperature As Temperature, relativeHumidity As RelativeHumidity) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateActualVaporPressure : UnitsNet.Temperature * UnitsNet.RelativeHumidity -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateActualVaporPressure (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.RelativeHumidity" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the actual vapor pressure.
            </summary>
        <returns>The actual vapor pressure</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAirDensity">
      <MemberSignature Language="C#" Value="public static UnitsNet.Density CalculateAirDensity (UnitsNet.Pressure airPressure, UnitsNet.Temperature temperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Density CalculateAirDensity(valuetype UnitsNet.Pressure airPressure, valuetype UnitsNet.Temperature temperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAirDensity (airPressure As Pressure, temperature As Temperature) As Density" />
      <MemberSignature Language="F#" Value="static member CalculateAirDensity : UnitsNet.Pressure * UnitsNet.Temperature -&gt; UnitsNet.Density" Usage="Iot.Device.Common.WeatherHelper.CalculateAirDensity (airPressure, temperature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Density</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airPressure" Type="UnitsNet.Pressure" Index="0" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="temperature" Type="UnitsNet.Temperature" Index="1" FrameworkAlternate="iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airPressure">Measured air pressure</param>
        <param name="temperature">Measured temperature</param>
        <summary>
            Simplified air density (not taking humidity into account)
            </summary>
        <returns>Approximate standard air density</returns>
        <remarks>From https://de.wikipedia.org/wiki/Luftdichte </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAirDensity">
      <MemberSignature Language="C#" Value="public static UnitsNet.Density CalculateAirDensity (UnitsNet.Pressure airPressure, UnitsNet.Temperature temperature, UnitsNet.RelativeHumidity humidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Density CalculateAirDensity(valuetype UnitsNet.Pressure airPressure, valuetype UnitsNet.Temperature temperature, valuetype UnitsNet.RelativeHumidity humidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAirDensity (airPressure As Pressure, temperature As Temperature, humidity As RelativeHumidity) As Density" />
      <MemberSignature Language="F#" Value="static member CalculateAirDensity : UnitsNet.Pressure * UnitsNet.Temperature * UnitsNet.RelativeHumidity -&gt; UnitsNet.Density" Usage="Iot.Device.Common.WeatherHelper.CalculateAirDensity (airPressure, temperature, humidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Density</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airPressure" Type="UnitsNet.Pressure" Index="0" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="temperature" Type="UnitsNet.Temperature" Index="1" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="humidity" Type="UnitsNet.RelativeHumidity" Index="2" FrameworkAlternate="iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airPressure">Measured air pressure</param>
        <param name="temperature">Measured temperature</param>
        <param name="humidity">Measured relative humidity</param>
        <summary>
            Calculates the air density
            </summary>
        <returns>Approximate standard air density at sea level</returns>
        <remarks>From https://de.wikipedia.org/wiki/Luftdichte </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAltitude">
      <MemberSignature Language="C#" Value="public static UnitsNet.Length CalculateAltitude (UnitsNet.Pressure pressure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Length CalculateAltitude(valuetype UnitsNet.Pressure pressure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAltitude (pressure As Pressure) As Length" />
      <MemberSignature Language="F#" Value="static member CalculateAltitude : UnitsNet.Pressure -&gt; UnitsNet.Length" Usage="Iot.Device.Common.WeatherHelper.CalculateAltitude pressure" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Length</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
      </Parameters>
      <Docs>
        <param name="pressure">The pressure at the point for which altitude is being calculated</param>
        <summary>
            Calculates the altitude in meters from the given pressure. Assumes mean sea-level pressure and temperature of 15C.
            </summary>
        <returns>The altitude</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAltitude">
      <MemberSignature Language="C#" Value="public static UnitsNet.Length CalculateAltitude (UnitsNet.Pressure pressure, UnitsNet.Pressure seaLevelPressure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Length CalculateAltitude(valuetype UnitsNet.Pressure pressure, valuetype UnitsNet.Pressure seaLevelPressure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Pressure)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAltitude (pressure As Pressure, seaLevelPressure As Pressure) As Length" />
      <MemberSignature Language="F#" Value="static member CalculateAltitude : UnitsNet.Pressure * UnitsNet.Pressure -&gt; UnitsNet.Length" Usage="Iot.Device.Common.WeatherHelper.CalculateAltitude (pressure, seaLevelPressure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Length</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
        <Parameter Name="seaLevelPressure" Type="UnitsNet.Pressure" />
      </Parameters>
      <Docs>
        <param name="pressure">The pressure at the point for which altitude is being calculated</param>
        <param name="seaLevelPressure">The sea-level pressure</param>
        <summary>
            Calculates the altitude in meters from the given pressure and sea-level pressure. Assumes temperature of 15C.
            </summary>
        <returns>The altitude</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAltitude">
      <MemberSignature Language="C#" Value="public static UnitsNet.Length CalculateAltitude (UnitsNet.Pressure pressure, UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Length CalculateAltitude(valuetype UnitsNet.Pressure pressure, valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAltitude (pressure As Pressure, airTemperature As Temperature) As Length" />
      <MemberSignature Language="F#" Value="static member CalculateAltitude : UnitsNet.Pressure * UnitsNet.Temperature -&gt; UnitsNet.Length" Usage="Iot.Device.Common.WeatherHelper.CalculateAltitude (pressure, airTemperature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Length</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="pressure">The pressure at the point for which altitude is being calculated</param>
        <param name="airTemperature">The dry air temperature at the point for which altitude is being calculated</param>
        <summary>
            Calculates the altitude in meters from the given pressure and air temperature. Assumes mean sea-level pressure.
            </summary>
        <returns>The altitude</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateAltitude">
      <MemberSignature Language="C#" Value="public static UnitsNet.Length CalculateAltitude (UnitsNet.Pressure pressure, UnitsNet.Pressure seaLevelPressure, UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Length CalculateAltitude(valuetype UnitsNet.Pressure pressure, valuetype UnitsNet.Pressure seaLevelPressure, valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Pressure,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateAltitude (pressure As Pressure, seaLevelPressure As Pressure, airTemperature As Temperature) As Length" />
      <MemberSignature Language="F#" Value="static member CalculateAltitude : UnitsNet.Pressure * UnitsNet.Pressure * UnitsNet.Temperature -&gt; UnitsNet.Length" Usage="Iot.Device.Common.WeatherHelper.CalculateAltitude (pressure, seaLevelPressure, airTemperature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Length</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
        <Parameter Name="seaLevelPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="pressure">The pressure at the point for which altitude is being calculated</param>
        <param name="seaLevelPressure">The sea-level pressure</param>
        <param name="airTemperature">The dry air temperature at the point for which altitude is being calculated</param>
        <summary>
            Calculates the altitude in meters from the given pressure, sea-level pressure and air temperature.
            </summary>
        <returns>The altitude</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateBarometricPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateBarometricPressure (UnitsNet.Pressure measuredPressure, UnitsNet.Temperature measuredTemperature, UnitsNet.Length measurementAltitude);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateBarometricPressure(valuetype UnitsNet.Pressure measuredPressure, valuetype UnitsNet.Temperature measuredTemperature, valuetype UnitsNet.Length measurementAltitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Length)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateBarometricPressure (measuredPressure As Pressure, measuredTemperature As Temperature, measurementAltitude As Length) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateBarometricPressure : UnitsNet.Pressure * UnitsNet.Temperature * UnitsNet.Length -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateBarometricPressure (measuredPressure, measuredTemperature, measurementAltitude)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="measuredPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="measuredTemperature" Type="UnitsNet.Temperature" />
        <Parameter Name="measurementAltitude" Type="UnitsNet.Length" />
      </Parameters>
      <Docs>
        <param name="measuredPressure">Measured pressure at the observation point</param>
        <param name="measuredTemperature">Measured temperature at the observation point</param>
        <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m). Do not use the height obtained by calling <see cref="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure)" />
            or any of its overloads, since that would use redundant data.</param>
        <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            <example>
            You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0属C. The met service will show that
            you are within a high-pressure area of around 1020 hPa.
            </example></summary>
        <returns>The barometric pressure at the point of observation</returns>
        <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_H旦henformel#Anwendungen
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateBarometricPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateBarometricPressure (UnitsNet.Pressure measuredPressure, UnitsNet.Temperature measuredTemperature, UnitsNet.Length measurementAltitude, UnitsNet.Ratio relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateBarometricPressure(valuetype UnitsNet.Pressure measuredPressure, valuetype UnitsNet.Temperature measuredTemperature, valuetype UnitsNet.Length measurementAltitude, valuetype UnitsNet.Ratio relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Length,UnitsNet.Ratio)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateBarometricPressure (measuredPressure As Pressure, measuredTemperature As Temperature, measurementAltitude As Length, relativeHumidity As Ratio) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateBarometricPressure : UnitsNet.Pressure * UnitsNet.Temperature * UnitsNet.Length * UnitsNet.Ratio -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateBarometricPressure (measuredPressure, measuredTemperature, measurementAltitude, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="measuredPressure" Type="UnitsNet.Pressure" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="measuredTemperature" Type="UnitsNet.Temperature" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="measurementAltitude" Type="UnitsNet.Length" Index="2" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.Ratio" Index="3" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="measuredPressure">Measured pressure at the observation point</param>
        <param name="measuredTemperature">Measured temperature at the observation point</param>
        <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m)</param>
        <param name="relativeHumidity">Relative humidity at point of measurement</param>
        <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            Use this method if you also have the relative humidity.
            </summary>
        <returns>The barometric pressure at the point of observation</returns>
        <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_H旦henformel#Anwendungen
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateBarometricPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateBarometricPressure (UnitsNet.Pressure measuredPressure, UnitsNet.Temperature measuredTemperature, UnitsNet.Length measurementAltitude, UnitsNet.RelativeHumidity relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateBarometricPressure(valuetype UnitsNet.Pressure measuredPressure, valuetype UnitsNet.Temperature measuredTemperature, valuetype UnitsNet.Length measurementAltitude, valuetype UnitsNet.RelativeHumidity relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Length,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateBarometricPressure (measuredPressure As Pressure, measuredTemperature As Temperature, measurementAltitude As Length, relativeHumidity As RelativeHumidity) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateBarometricPressure : UnitsNet.Pressure * UnitsNet.Temperature * UnitsNet.Length * UnitsNet.RelativeHumidity -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateBarometricPressure (measuredPressure, measuredTemperature, measurementAltitude, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="measuredPressure" Type="UnitsNet.Pressure" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="measuredTemperature" Type="UnitsNet.Temperature" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="measurementAltitude" Type="UnitsNet.Length" Index="2" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.RelativeHumidity" Index="3" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="measuredPressure">Measured pressure at the observation point</param>
        <param name="measuredTemperature">Measured temperature at the observation point</param>
        <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m)</param>
        <param name="relativeHumidity">Relative humidity at point of measurement</param>
        <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            Use this method if you also have the relative humidity.
            </summary>
        <returns>The barometric pressure at the point of observation</returns>
        <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_H旦henformel#Anwendungen
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateBarometricPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateBarometricPressure (UnitsNet.Pressure measuredPressure, UnitsNet.Temperature measuredTemperature, UnitsNet.Pressure vaporPressure, UnitsNet.Length measurementAltitude);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateBarometricPressure(valuetype UnitsNet.Pressure measuredPressure, valuetype UnitsNet.Temperature measuredTemperature, valuetype UnitsNet.Pressure vaporPressure, valuetype UnitsNet.Length measurementAltitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Pressure,UnitsNet.Length)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateBarometricPressure (measuredPressure As Pressure, measuredTemperature As Temperature, vaporPressure As Pressure, measurementAltitude As Length) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateBarometricPressure : UnitsNet.Pressure * UnitsNet.Temperature * UnitsNet.Pressure * UnitsNet.Length -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateBarometricPressure (measuredPressure, measuredTemperature, vaporPressure, measurementAltitude)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="measuredPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="measuredTemperature" Type="UnitsNet.Temperature" />
        <Parameter Name="vaporPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="measurementAltitude" Type="UnitsNet.Length" />
      </Parameters>
      <Docs>
        <param name="measuredPressure">Measured pressure at the observation point</param>
        <param name="measuredTemperature">Measured temperature at the observation point</param>
        <param name="vaporPressure">Vapor pressure, meteorologic definition</param>
        <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m)</param>
        <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            <example>
            You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0属C. The met service will show that
            you are within a high-pressure area of around 1020 hPa.
            </example></summary>
        <returns>The barometric pressure at the point of observation</returns>
        <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_H旦henformel#Anwendungen
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateDewPoint">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateDewPoint (UnitsNet.Temperature airTemperature, UnitsNet.Ratio relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateDewPoint(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.Ratio relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateDewPoint(UnitsNet.Temperature,UnitsNet.Ratio)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateDewPoint (airTemperature As Temperature, relativeHumidity As Ratio) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateDewPoint : UnitsNet.Temperature * UnitsNet.Ratio -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateDewPoint (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.Ratio" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the dew point.
            </summary>
        <returns>The dew point</returns>
        <remarks>
            Source https://en.wikipedia.org/wiki/Dew_point
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateDewPoint">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateDewPoint (UnitsNet.Temperature airTemperature, UnitsNet.RelativeHumidity relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateDewPoint(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.RelativeHumidity relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateDewPoint(UnitsNet.Temperature,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateDewPoint (airTemperature As Temperature, relativeHumidity As RelativeHumidity) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateDewPoint : UnitsNet.Temperature * UnitsNet.RelativeHumidity -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateDewPoint (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.RelativeHumidity" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            Calculates the dew point. The dew point is the temperature at which, given the other values remain constant - dew or fog would start
            building up.
            </summary>
        <returns>The dew point</returns>
        <remarks>
            Source https://en.wikipedia.org/wiki/Dew_point
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateHeatIndex">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateHeatIndex (UnitsNet.Temperature airTemperature, UnitsNet.Ratio relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateHeatIndex(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.Ratio relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateHeatIndex(UnitsNet.Temperature,UnitsNet.Ratio)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateHeatIndex (airTemperature As Temperature, relativeHumidity As Ratio) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateHeatIndex : UnitsNet.Temperature * UnitsNet.Ratio -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateHeatIndex (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.Ratio" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH) expressed as a ratio</param>
        <summary>
            The heat index (or apparent temperature) is used to measure the amount of discomfort
            during the summer months when heat and humidity often combine to make it feel hotter
            than it actually is. The heat index is usually used for afternoon high temperatures.
            </summary>
        <returns>The heat index, also known as the apparent temperature</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateHeatIndex">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateHeatIndex (UnitsNet.Temperature airTemperature, UnitsNet.RelativeHumidity relativeHumidity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateHeatIndex(valuetype UnitsNet.Temperature airTemperature, valuetype UnitsNet.RelativeHumidity relativeHumidity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateHeatIndex(UnitsNet.Temperature,UnitsNet.RelativeHumidity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateHeatIndex (airTemperature As Temperature, relativeHumidity As RelativeHumidity) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateHeatIndex : UnitsNet.Temperature * UnitsNet.RelativeHumidity -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateHeatIndex (airTemperature, relativeHumidity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidity" Type="UnitsNet.RelativeHumidity" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <param name="relativeHumidity">The relative humidity (RH)</param>
        <summary>
            The heat index (or apparent temperature) is used to measure the amount of discomfort
            during the summer months when heat and humidity often combine to make it feel hotter
            than it actually is. The heat index is usually used for afternoon high temperatures.
            </summary>
        <returns>The heat index, also known as the apparent temperature</returns>
        <remarks>
            Formula from https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculatePressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculatePressure (UnitsNet.Pressure seaLevelPressure, UnitsNet.Length altitude, UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculatePressure(valuetype UnitsNet.Pressure seaLevelPressure, valuetype UnitsNet.Length altitude, valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculatePressure (seaLevelPressure As Pressure, altitude As Length, airTemperature As Temperature) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculatePressure : UnitsNet.Pressure * UnitsNet.Length * UnitsNet.Temperature -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculatePressure (seaLevelPressure, altitude, airTemperature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seaLevelPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="altitude" Type="UnitsNet.Length" />
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="seaLevelPressure">The sea-level pressure</param>
        <param name="altitude">The altitude in meters at the point for which pressure is being calculated</param>
        <param name="airTemperature">The air temperature at the point for which pressure is being calculated</param>
        <summary>
            Calculates the approximate absolute pressure from given sea-level pressure, altitude and air temperature.
            </summary>
        <returns>The estimated absolute pressure at the given altitude</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateSaturatedVaporPressureOverIce">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateSaturatedVaporPressureOverIce (UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateSaturatedVaporPressureOverIce(valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverIce(UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateSaturatedVaporPressureOverIce (airTemperature As Temperature) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateSaturatedVaporPressureOverIce : UnitsNet.Temperature -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverIce airTemperature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <summary>
            Calculates the saturated vapor pressure for a given air temperature over ice.
            The formula used is valid for temperatures between -100属C and +0属C.
            </summary>
        <returns>The saturated vapor pressure</returns>
        <remarks>
            From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser, after D. Sonntag (1982)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateSaturatedVaporPressureOverWater">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateSaturatedVaporPressureOverWater (UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateSaturatedVaporPressureOverWater(valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverWater(UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateSaturatedVaporPressureOverWater (airTemperature As Temperature) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateSaturatedVaporPressureOverWater : UnitsNet.Temperature -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverWater airTemperature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="airTemperature">The dry air temperature</param>
        <summary>
            Calculates the saturated vapor pressure for a given air temperature over water.
            The formula used is valid for temperatures between -100属C and +100属C.
            </summary>
        <returns>The saturated vapor pressure</returns>
        <remarks>
            From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser, after D. Sonntag (1982)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateSeaLevelPressure">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateSeaLevelPressure (UnitsNet.Pressure pressure, UnitsNet.Length altitude, UnitsNet.Temperature airTemperature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateSeaLevelPressure(valuetype UnitsNet.Pressure pressure, valuetype UnitsNet.Length altitude, valuetype UnitsNet.Temperature airTemperature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateSeaLevelPressure (pressure As Pressure, altitude As Length, airTemperature As Temperature) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateSeaLevelPressure : UnitsNet.Pressure * UnitsNet.Length * UnitsNet.Temperature -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure (pressure, altitude, airTemperature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
        <Parameter Name="altitude" Type="UnitsNet.Length" />
        <Parameter Name="airTemperature" Type="UnitsNet.Temperature" />
      </Parameters>
      <Docs>
        <param name="pressure">The air pressure at the point of measurement</param>
        <param name="altitude">The altitude at the point of the measurement</param>
        <param name="airTemperature">The air temperature</param>
        <summary>
            Calculates the approximate sea-level pressure from given absolute pressure, altitude and air temperature.
            </summary>
        <returns>The estimated absolute sea-level pressure</returns>
        <remarks>
          <see cref="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" /> solved for sea level pressure</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateTemperature">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateTemperature (UnitsNet.Pressure pressure, UnitsNet.Pressure seaLevelPressure, UnitsNet.Length altitude);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateTemperature(valuetype UnitsNet.Pressure pressure, valuetype UnitsNet.Pressure seaLevelPressure, valuetype UnitsNet.Length altitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateTemperature(UnitsNet.Pressure,UnitsNet.Pressure,UnitsNet.Length)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateTemperature (pressure As Pressure, seaLevelPressure As Pressure, altitude As Length) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateTemperature : UnitsNet.Pressure * UnitsNet.Pressure * UnitsNet.Length -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateTemperature (pressure, seaLevelPressure, altitude)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pressure" Type="UnitsNet.Pressure" />
        <Parameter Name="seaLevelPressure" Type="UnitsNet.Pressure" />
        <Parameter Name="altitude" Type="UnitsNet.Length" />
      </Parameters>
      <Docs>
        <param name="pressure">The air pressure at the point for which temperature is being calculated</param>
        <param name="seaLevelPressure">The sea-level pressure</param>
        <param name="altitude">The altitude in meters at the point for which temperature is being calculated</param>
        <summary>
            Calculates the temperature gradient for the given pressure difference
            </summary>
        <returns>The standard temperature at the given altitude, when the given pressure difference is known</returns>
        <remarks>
          <see cref="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)" /> solved for temperature</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateWindchill">
      <MemberSignature Language="C#" Value="public static UnitsNet.Temperature CalculateWindchill (UnitsNet.Temperature temperature, UnitsNet.Speed windSpeed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Temperature CalculateWindchill(valuetype UnitsNet.Temperature temperature, valuetype UnitsNet.Speed windSpeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateWindchill(UnitsNet.Temperature,UnitsNet.Speed)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateWindchill (temperature As Temperature, windSpeed As Speed) As Temperature" />
      <MemberSignature Language="F#" Value="static member CalculateWindchill : UnitsNet.Temperature * UnitsNet.Speed -&gt; UnitsNet.Temperature" Usage="Iot.Device.Common.WeatherHelper.CalculateWindchill (temperature, windSpeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Temperature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="temperature" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="windSpeed" Type="UnitsNet.Speed" Index="1" FrameworkAlternate="iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="temperature">The measured air temperature</param>
        <param name="windSpeed">The wind speed (measured at 10m above ground)</param>
        <summary>
            Calculates the wind chill temperature - this is the perceived temperature in (heavy) winds at cold temperatures.
            This is only useful at temperatures below about 20属C, above use <see cref="M:Iot.Device.Common.WeatherHelper.CalculateHeatIndex(UnitsNet.Temperature,UnitsNet.RelativeHumidity)" /> instead.
            Not suitable for wind speeds &lt; 5 km/h.
            </summary>
        <returns>The perceived temperature. Note that this is not a real temperature, and the skin will never really reach
            this temperature. This is more an indication on how fast the skin will reach the air temperature. If the skin
            reaches a temperature of about -5属C, frostbite might occur.</returns>
        <remarks>From https://de.wikipedia.org/wiki/Windchill </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The wind speed is less than zero</exception>
      </Docs>
    </Member>
    <Member MemberName="CalculateWindForce">
      <MemberSignature Language="C#" Value="public static UnitsNet.Pressure CalculateWindForce (UnitsNet.Density densityOfAir, UnitsNet.Speed windSpeed, double pressureCoefficient = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Pressure CalculateWindForce(valuetype UnitsNet.Density densityOfAir, valuetype UnitsNet.Speed windSpeed, float64 pressureCoefficient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.CalculateWindForce(UnitsNet.Density,UnitsNet.Speed,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CalculateWindForce (densityOfAir As Density, windSpeed As Speed, Optional pressureCoefficient As Double = 1) As Pressure" />
      <MemberSignature Language="F#" Value="static member CalculateWindForce : UnitsNet.Density * UnitsNet.Speed * double -&gt; UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.CalculateWindForce (densityOfAir, windSpeed, pressureCoefficient)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="densityOfAir" Type="UnitsNet.Density" Index="0" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="windSpeed" Type="UnitsNet.Speed" Index="1" FrameworkAlternate="iot-dotnet-latest" />
        <Parameter Name="pressureCoefficient" Type="System.Double" Index="2" FrameworkAlternate="iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="densityOfAir">The denisty of the air, calculated using one of the overloads of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature)" /></param>
        <param name="windSpeed">The speed of the wind</param>
        <param name="pressureCoefficient">Pressure coefficient for the shape of the object. Use 1 for a rectangular object directly facing the wind</param>
        <summary>
            Calculates the wind force on an object.
            </summary>
        <returns>The Pressure the wind applies on the object</returns>
        <remarks>From https://de.wikipedia.org/wiki/Winddruck </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativeHumidityFromActualAirTemperature">
      <MemberSignature Language="C#" Value="public static UnitsNet.Ratio GetRelativeHumidityFromActualAirTemperature (UnitsNet.Temperature airTemperatureFromHumiditySensor, UnitsNet.Ratio relativeHumidityMeasured, UnitsNet.Temperature airTemperatureFromBetterPlacedSensor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.Ratio GetRelativeHumidityFromActualAirTemperature(valuetype UnitsNet.Temperature airTemperatureFromHumiditySensor, valuetype UnitsNet.Ratio relativeHumidityMeasured, valuetype UnitsNet.Temperature airTemperatureFromBetterPlacedSensor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.GetRelativeHumidityFromActualAirTemperature(UnitsNet.Temperature,UnitsNet.Ratio,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativeHumidityFromActualAirTemperature (airTemperatureFromHumiditySensor As Temperature, relativeHumidityMeasured As Ratio, airTemperatureFromBetterPlacedSensor As Temperature) As Ratio" />
      <MemberSignature Language="F#" Value="static member GetRelativeHumidityFromActualAirTemperature : UnitsNet.Temperature * UnitsNet.Ratio * UnitsNet.Temperature -&gt; UnitsNet.Ratio" Usage="Iot.Device.Common.WeatherHelper.GetRelativeHumidityFromActualAirTemperature (airTemperatureFromHumiditySensor, relativeHumidityMeasured, airTemperatureFromBetterPlacedSensor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Ratio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperatureFromHumiditySensor" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="relativeHumidityMeasured" Type="UnitsNet.Ratio" Index="1" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
        <Parameter Name="airTemperatureFromBetterPlacedSensor" Type="UnitsNet.Temperature" Index="2" FrameworkAlternate="iot-dotnet-1.1;iot-dotnet-1.2" />
      </Parameters>
      <Docs>
        <param name="airTemperatureFromHumiditySensor">Temperature measured by the humidity sensor</param>
        <param name="relativeHumidityMeasured">Humidity measured</param>
        <param name="airTemperatureFromBetterPlacedSensor">Temperature measured by better placed sensor</param>
        <summary>
            Calculates a corrected relative humidity. This is useful if you have a temperature/humidity sensor that is
            placed in a location where the temperature is different from the real ambient temperature (like it sits inside a hot case)
            and another temperature-only sensor that gives more reasonable ambient temperature readings.
            Do note that the relative humidity is dependent on the temperature, because it depends on how much water a volume of air
            can contain, which increases with temperature.
            </summary>
        <returns>A corrected humidity. The value will be lower than the input value if the better placed sensor is cooler than
            the "bad" sensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativeHumidityFromActualAirTemperature">
      <MemberSignature Language="C#" Value="public static UnitsNet.RelativeHumidity GetRelativeHumidityFromActualAirTemperature (UnitsNet.Temperature airTemperatureFromHumiditySensor, UnitsNet.RelativeHumidity relativeHumidityMeasured, UnitsNet.Temperature airTemperatureFromBetterPlacedSensor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype UnitsNet.RelativeHumidity GetRelativeHumidityFromActualAirTemperature(valuetype UnitsNet.Temperature airTemperatureFromHumiditySensor, valuetype UnitsNet.RelativeHumidity relativeHumidityMeasured, valuetype UnitsNet.Temperature airTemperatureFromBetterPlacedSensor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Iot.Device.Common.WeatherHelper.GetRelativeHumidityFromActualAirTemperature(UnitsNet.Temperature,UnitsNet.RelativeHumidity,UnitsNet.Temperature)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativeHumidityFromActualAirTemperature (airTemperatureFromHumiditySensor As Temperature, relativeHumidityMeasured As RelativeHumidity, airTemperatureFromBetterPlacedSensor As Temperature) As RelativeHumidity" />
      <MemberSignature Language="F#" Value="static member GetRelativeHumidityFromActualAirTemperature : UnitsNet.Temperature * UnitsNet.RelativeHumidity * UnitsNet.Temperature -&gt; UnitsNet.RelativeHumidity" Usage="Iot.Device.Common.WeatherHelper.GetRelativeHumidityFromActualAirTemperature (airTemperatureFromHumiditySensor, relativeHumidityMeasured, airTemperatureFromBetterPlacedSensor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.RelativeHumidity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="airTemperatureFromHumiditySensor" Type="UnitsNet.Temperature" Index="0" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="relativeHumidityMeasured" Type="UnitsNet.RelativeHumidity" Index="1" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
        <Parameter Name="airTemperatureFromBetterPlacedSensor" Type="UnitsNet.Temperature" Index="2" FrameworkAlternate="iot-dotnet-1.3;iot-dotnet-1.4;iot-dotnet-1.5;iot-dotnet-2.0;iot-dotnet-2.1;iot-dotnet-latest" />
      </Parameters>
      <Docs>
        <param name="airTemperatureFromHumiditySensor">Temperature measured by the humidity sensor</param>
        <param name="relativeHumidityMeasured">Humidity measured</param>
        <param name="airTemperatureFromBetterPlacedSensor">Temperature measured by better placed sensor</param>
        <summary>
            Calculates a corrected relative humidity. This is useful if you have a temperature/humidity sensor that is
            placed in a location where the temperature is different from the real ambient temperature (like it sits inside a hot case)
            and another temperature-only sensor that gives more reasonable ambient temperature readings.
            Do note that the relative humidity is dependent on the temperature, because it depends on how much water a volume of air
            can contain, which increases with temperature.
            </summary>
        <returns>A corrected humidity. The value will be lower than the input value if the better placed sensor is cooler than
            the "bad" sensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeanSeaLevel">
      <MemberSignature Language="C#" Value="public static readonly UnitsNet.Pressure MeanSeaLevel;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype UnitsNet.Pressure MeanSeaLevel" />
      <MemberSignature Language="DocId" Value="F:Iot.Device.Common.WeatherHelper.MeanSeaLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MeanSeaLevel As Pressure " />
      <MemberSignature Language="F#" Value=" staticval mutable MeanSeaLevel : UnitsNet.Pressure" Usage="Iot.Device.Common.WeatherHelper.MeanSeaLevel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Iot.Device.Bindings</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnitsNet.Pressure</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The mean sea-level pressure (MSLP) is the average atmospheric pressure at mean sea level
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
